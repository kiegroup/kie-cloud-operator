console:
  persistentVolumeClaims:
    - metadata:
        name: "[[.ApplicationName]]-[[.Console.Name]]-claim"
        labels:
          app: "[[.ApplicationName]]"
          application: "[[.ApplicationName]]"
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 1Gi

  deploymentConfigs:
    - metadata:
        name: "[[.ApplicationName]]-[[.Console.Name]]"
      spec:
        template:
          metadata:
            name: "[[.ApplicationName]]-[[.Console.Name]]"
          spec:
            containers:
              - name: "[[.ApplicationName]]-[[.Console.Name]]"
                volumeMounts:
                  - name: "[[.ApplicationName]]-[[.Console.Name]]-pvol"
                    mountPath: "/opt/kie/data"
                env:
                  - name: APPFORMER_INFINISPAN_SERVICE_NAME
                    value: "[[.ApplicationName]]-datagrid"
                  - name: APPFORMER_INFINISPAN_PORT
                    value: "11222"
                  - name: APPFORMER_JMS_BROKER_ADDRESS
                    value: "[[.ApplicationName]]-amq-tcp"
                  - name: APPFORMER_JMS_BROKER_PORT
                    value: "61616"
                  - name: APPFORMER_JMS_BROKER_USER
                    value: "jmsBrokerUser"
                  - name: APPFORMER_JMS_BROKER_PASSWORD
                    value: "[[.AMQClusterPassword]]"
            volumes:
              - name: "[[.ApplicationName]]-[[.Console.Name]]-pvol"
                persistentVolumeClaim:
                  claimName: "[[.ApplicationName]]-[[.Console.Name]]-claim"

# ES/AMQ BEGIN
others:
  - statefulsets:
      - metadata:
          name: "[[.ApplicationName]]-datagrid"
          labels:
            app: "[[.ApplicationName]]"
            application: "[[.ApplicationName]]"
            service: "[[.ApplicationName]]-datagrid"
        spec:
          podManagementPolicy: OrderedReady
          replicas: 1
          selector:
            matchLabels:
              deploymentConfig: "[[.ApplicationName]]-datagrid"
          serviceName: "[[.ApplicationName]]-datagrid"
          strategy:
            rollingParams:
              intervalSeconds: 20
              maxSurge: 1
              maxUnavailable: 1
              timeoutSeconds: 1200
              updatePeriodSeconds: 20
            type: Rolling
          template:
            metadata:
              labels:
                app: "[[.ApplicationName]]"
                application: "[[.ApplicationName]]"
                deploymentConfig: "[[.ApplicationName]]-datagrid"
              name: "[[.ApplicationName]]-datagrid"
            spec:
              containers:
                - env:
                    - name: SERVICE_NAME
                      value: "[[.ApplicationName]]-datagrid"
                    - name: SERVICE_PROFILE
                      value: "[[.ApplicationName]]-datagrid"
                    - name: JGROUPS_PING_PROTOCOL
                      value: openshift.DNS_PING
                    - name: OPENSHIFT_DNS_PING_SERVICE_NAME
                      value: "[[.ApplicationName]]-datagrid-ping"
                    - name: INFINISPAN_CONNECTORS
                      value: "hotrod"
                  image: "registry.redhat.io/jboss-datagrid-7/[[$.Constants.DatagridImage]]:[[$.Constants.DatagridImageTag]]"
                  imagePullPolicy: IfNotPresent
                  name: "[[.ApplicationName]]-datagrid"
                  ports:
                    - containerPort: 8888
                      name: ping
                      protocol: TCP
                    - containerPort: 11222
                      name: hotrod
                      protocol: TCP
                  livenessProbe:
                    exec:
                      command:
                        - /opt/datagrid/bin/livenessProbe.sh
                    failureThreshold: 5
                    initialDelaySeconds: 15
                    periodSeconds: 20
                    successThreshold: 1
                    timeoutSeconds: 10
                  readinessProbe:
                    exec:
                      command:
                        - /opt/datagrid/bin/readinessProbe.sh
                    failureThreshold: 5
                    initialDelaySeconds: 17
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 10
                  resources:
                    limits:
                      cpu: "1000m"
                      memory: "2Gi"
                    requests:
                      cpu: "1000m"
                      memory: "2Gi"
                  volumeMounts:
                    - mountPath: /opt/datagrid/standalone/data
                      name: srv-data
                    - mountPath: /var/run/secrets/java.io/keystores
                      name: datagrid-keystore-volume
                    - mountPath: /var/run/secrets/openshift.io/serviceaccount
                      name: datagrid-service-certs
              dnsPolicy: ClusterFirst
              restartPolicy: Always
              schedulerName: default-scheduler
              securityContext: {}
              terminationGracePeriodSeconds: 60
              volumes:
                - empty-dir: {}
                  name: datagrid-keystore-volume
                - name: datagrid-service-certs
                  secret:
                    secretName: datagrid-service-certs
          triggers:
            - type: ConfigChange
          volumeClaimTemplates:
            - metadata:
                name: srv-data
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 1Gi
      - metadata:
          annotations:
            alpha.image.policy.openshift.io/resolve-names: "*"
          labels:
            app: "[[.ApplicationName]]"
            application: "[[.ApplicationName]]"
          name: "[[.ApplicationName]]-amq"
        spec:
          podManagementPolicy: OrderedReady
          replicas: 2
          revisionHistoryLimit: 10
          selector:
            matchLabels:
              app: "[[.ApplicationName]]"
          serviceName: "[[.ApplicationName]]-amq-tcp"
          template:
            metadata:
              creationTimestamp: null
              labels:
                app: "[[.ApplicationName]]"
                application: "[[.ApplicationName]]"
                deploymentConfig: "[[.ApplicationName]]-amq"
              name: "[[.ApplicationName]]-amq"
            spec:
              containers:
                - env:
                    - name: AMQ_USER
                      value: "jmsBrokerUser"
                    - name: AMQ_PASSWORD
                      value: "[[.AMQPassword]]"
                    - name: AMQ_ROLE
                      value: admin
                    - name: AMQ_NAME
                      value: broker
                    - name: AMQ_TRANSPORTS
                      value: "openwire"
                    - name: AMQ_GLOBAL_MAX_SIZE
                      value: "100 gb"
                    - name: AMQ_REQUIRE_LOGIN
                    - name: AMQ_DATA_DIR
                      value: /opt/amq/data
                    - name: AMQ_DATA_DIR_LOGGING
                      value: "true"
                    - name: AMQ_CLUSTERED
                      value: "true"
                    - name: AMQ_REPLICAS
                      value: "0"
                    - name: AMQ_CLUSTER_USER
                      value: "jmsBrokerUser"
                    - name: AMQ_CLUSTER_PASSWORD
                      value: "[[.AMQClusterPassword]]"
                    - name: OPENSHIFT_DNS_PING_SERVICE_NAME
                      value: "[[.ApplicationName]]-amq-ping"
                    - name: AMQ_EXTRA_ARGS
                    - name: AMQ_ANYCAST_PREFIX
                    - name: AMQ_MULTICAST_PREFIX
                    - name: POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                          apiVersion: v1
                          fieldPath: metadata.namespace
                  image: "registry.redhat.io/amq7/[[$.Constants.BrokerImage]]:[[$.Constants.BrokerImageTag]]"
                  imagePullPolicy: IfNotPresent
                  name: broker-amq
                  ports:
                    - containerPort: 8161
                      name: jolokia
                      protocol: TCP
                    - containerPort: 5672
                      name: amqp
                      protocol: TCP
                    - containerPort: 1883
                      name: mqtt
                      protocol: TCP
                    - containerPort: 61613
                      name: stomp
                      protocol: TCP
                    - containerPort: 61616
                      name: artemis
                      protocol: TCP
                  readinessProbe:
                    exec:
                      command:
                        - /bin/bash
                        - -c
                        - /opt/amq/bin/readinessProbe.sh
                    failureThreshold: 3
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 1
                  resources: {}
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
                  volumeMounts:
                    - mountPath: /opt/amq/data
                      name: "[[.ApplicationName]]-amq-pvol"
              dnsPolicy: ClusterFirst
              restartPolicy: Always
              schedulerName: default-scheduler
              securityContext: {}
              terminationGracePeriodSeconds: 60
          updateStrategy:
            type: OnDelete
          volumeClaimTemplates:
            - metadata:
                creationTimestamp: null
                name: "[[.ApplicationName]]-amq-pvol"
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 1Gi

    services:
      - spec:
          clusterIP: None
          ports:
            - port: 61616
              targetPort: 61616
          selector:
            deploymentConfig: "[[.ApplicationName]]-amq"
        metadata:
          name: "[[.ApplicationName]]-amq-tcp"
          labels:
            app: "[[.ApplicationName]]"
            application: "[[.ApplicationName]]"
            service: "[[.ApplicationName]]-amq"
          annotations:
            description: The broker's OpenWire port.

      - spec:
          clusterIP: None
          ports:
            - port: 8888
              protocol: TCP
              targetPort: 8888
          selector:
            deploymentConfig: "[[.ApplicationName]]-amq"
        metadata:
          name: "[[.ApplicationName]]-amq-ping"
          annotations:
            description: The JGroups ping port for clustering.
            service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
          labels:
            app: "[[.ApplicationName]]"
            application: "[[.ApplicationName]]"

      - spec:
          clusterIP: None
          ports:
            - name: ping
              port: 8888
              protocol: TCP
              targetPort: 8888
          selector:
            deploymentConfig: "[[.ApplicationName]]-datagrid"
        metadata:
          name: "[[.ApplicationName]]-datagrid-ping"
          labels:
            application: "[[.ApplicationName]]"
          annotations:
            description: "The JGroups ping port for clustering."
            service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"

      - spec:
          ports:
            - name: hotrod
              port: 11222
              protocol: TCP
              targetPort: 11222
          selector:
            deploymentConfig: "[[.ApplicationName]]-datagrid"
        metadata:
          name: "[[.ApplicationName]]-datagrid"
          labels:
            application: "[[.ApplicationName]]"
          annotations:
            description: Provides a service for accessing the application over Hot Rod protocol.
            service.alpha.openshift.io/serving-cert-secret-name: datagrid-service-certs
## ES/AMQ END

