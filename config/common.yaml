console:
  deploymentConfigs:
    - metadata:
        name: "{{.ApplicationName}}-{{.Console.Name}}"
        labels:
          app: "{{.ApplicationName}}-{{.Console.Name}}"
          application: "{{.ApplicationName}}"
          service: "{{.Product}}-{{.Console.Name}}"
      spec:
        strategy:
          type: Recreate
        triggers:
          - type: ImageChange
            imageChangeParams:
              automatic: true
              containerNames:
                - "{{.ApplicationName}}-{{.Console.Name}}"
              from:
                kind: ImageStreamTag
                namespace: openshift
                name: "{{.Product}}{{.Version}}-{{.Console.ImageName}}-openshift:{{.ImageTag}}"
          - type: ConfigChange
        replicas: 1
        selector:
          deploymentConfig: "{{.ApplicationName}}-{{.Console.Name}}"
        template:
          metadata:
            name: "{{.ApplicationName}}-{{.Console.Name}}"
            labels:
              deploymentConfig: "{{.ApplicationName}}-{{.Console.Name}}"
              app: "{{.ApplicationName}}-{{.Console.Name}}"
              application: "{{.ApplicationName}}"
              service: "{{.Product}}-{{.Console.Name}}"
          spec:
            serviceAccountName: "{{.ApplicationName}}-{{.Product}}svc"
            terminationGracePeriodSeconds: 60
            containers:
              - name: "{{.ApplicationName}}-{{.Console.Name}}"
                image: "{{.Product}}{{.Version}}-{{.Console.ImageName}}-openshift"
                imagePullPolicy: Always
                resources:
                  limits:
                    memory: 2Gi
                livenessProbe:
                  exec:
                    command:
                      - "/bin/bash"
                      - "-c"
                      - curl --fail --silent -u "${KIE_ADMIN_USER}":"${KIE_ADMIN_PWD}" http://localhost:8080/{{.Console.ProbePage}}
                  initialDelaySeconds: 180
                  timeoutSeconds: 2
                  periodSeconds: 15
                readinessProbe:
                  exec:
                    command:
                      - "/bin/bash"
                      - "-c"
                      - curl --fail --silent -u "${KIE_ADMIN_USER}":"${KIE_ADMIN_PWD}" http://localhost:8080/{{.Console.ProbePage}}
                  initialDelaySeconds: 60
                  timeoutSeconds: 2
                  periodSeconds: 30
                  failureThreshold: 6
                ports:
                  - name: jolokia
                    containerPort: 8778
                    protocol: TCP
                  - name: http
                    containerPort: 8080
                    protocol: TCP
                  - name: https
                    containerPort: 8443
                    protocol: TCP
                  - name: ping
                    containerPort: 8888
                    protocol: TCP
                env:
                  - name: KIE_ADMIN_USER
                    value: adminUser
                  - name: KIE_ADMIN_PWD
                    value: "{{.AdminPassword}}"
                  - name: KIE_MAVEN_USER
                    value: mavenUser
                  - name: KIE_MAVEN_PWD
                    value: "{{.MavenPassword}}"
                  - name: KIE_SERVER_CONTROLLER_USER
                    value: controllerUser
                  - name: KIE_SERVER_CONTROLLER_PWD
                    value: "{{.ControllerPassword}}"
                  - name: KIE_SERVER_USER
                    value: executionUser
                  - name: KIE_SERVER_PWD
                    value: "{{.ServerPassword}}"
                  - name: KIE_MBEANS
                    value: enabled
                  ## OpenShift Enhancement BEGIN
                  #- name: KIE_CONTROLLER_OCP_ENABLED
                  #  value: "true"
                  #- name: KIE_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
                  #  value: "true"
                  #- name: KIE_CONTROLLER_TEMPLATE_CACHE_TTL
                  #  value: "60000"
                  ## OpenShift Enhancement END
                  - name: HTTPS_KEYSTORE_DIR
                    value: "/etc/businesscentral-secret-volume"
                  - name: HTTPS_KEYSTORE
                    value: "keystore.jks"
                  - name: HTTPS_NAME
                    value: "jboss"
                  - name: HTTPS_PASSWORD
                    value: "{{.KeyStorePassword}}"
                  - name: WORKBENCH_ROUTE_NAME
                    value: "{{.ApplicationName}}-{{.Console.Name}}"
                  - name: JGROUPS_PING_PROTOCOL
                    value: "openshift.DNS_PING"
                  - name: OPENSHIFT_DNS_PING_SERVICE_NAME
                    value: "{{.ApplicationName}}-{{.Console.Name}}-ping"
                  - name: OPENSHIFT_DNS_PING_SERVICE_PORT
                    value: "8888"
                  # Auth config BEGIN
                  ## SSO config BEGIN
                  #{{if .Auth.SSO.URL}}
                  - name: SSO_OPENIDCONNECT_DEPLOYMENTS
                    value: ROOT.war
                  - name: SSO_URL
                    value: "{{.Auth.SSO.URL}}"
                  - name: SSO_REALM
                    value: "{{.Auth.SSO.Realm}}"
                  - name: SSO_USERNAME
                    value: "{{.Auth.SSO.AdminUser}}"
                  - name: SSO_PASSWORD
                    value: "{{.Auth.SSO.AdminPassword}}"
                  - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
                    value: "{{.Auth.SSO.DisableSSLCertValidation}}"
                  - name: SSO_PRINCIPAL_ATTRIBUTE
                    value: "{{.Auth.SSO.PrincipalAttribute}}"
                  - name: SSO_SECRET
                    value: "{{.Console.SSOAuthClient.Secret}}"
                  - name: SSO_CLIENT
                    value: "{{.Console.SSOAuthClient.Name}}"
                  - name: HOSTNAME_HTTP
                    value: "{{.Console.SSOAuthClient.HostnameHTTP}}"
                  - name: HOSTNAME_HTTPS
                    value: "{{.Console.SSOAuthClient.HostnameHTTPS}}"
                  #{{end}}
                  ## SSO config END
                  ## LDAP config BEGIN
                  #{{if .Auth.LDAP.URL}}
                  - name: AUTH_LDAP_URL
                    value: "{{.Auth.LDAP.URL}}"
                  - name: AUTH_LDAP_BIND_DN
                    value: "{{.Auth.LDAP.BindDN}}"
                  - name: AUTH_LDAP_BIND_CREDENTIAL
                    value: "{{.Auth.LDAP.BindCredential}}"
                  - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
                    value: "{{.Auth.LDAP.JAASSecurityDomain}}"
                  - name: AUTH_LDAP_BASE_CTX_DN
                    value: "{{.Auth.LDAP.BaseCtxDN}}"
                  - name: AUTH_LDAP_BASE_FILTER
                    value: "{{.Auth.LDAP.BaseFilter}}"
                  - name: AUTH_LDAP_SEARCH_SCOPE
                    value: "{{.Auth.LDAP.SearchScope}}"
                  - name: AUTH_LDAP_SEARCH_TIME_LIMIT
                    value: "{{.Auth.LDAP.SearchTimeLimit}}"
                  - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
                    value: "{{.Auth.LDAP.DistinguishedNameAttribute}}"
                  - name: AUTH_LDAP_PARSE_USERNAME
                    value: "{{.Auth.LDAP.ParseUsername}}"
                  - name: AUTH_LDAP_USERNAME_BEGIN_STRING
                    value: "{{.Auth.LDAP.UsernameBeginString}}"
                  - name: AUTH_LDAP_USERNAME_END_STRING
                    value: "{{.Auth.LDAP.UsernameEndString}}"
                  - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
                    value: "{{.Auth.LDAP.RoleAttributeID}}"
                  - name: AUTH_LDAP_ROLES_CTX_DN
                    value: "{{.Auth.LDAP.RolesCtxDN}}"
                  - name: AUTH_LDAP_ROLE_FILTER
                    value: "{{.Auth.LDAP.RoleFilter}}"
                  - name: AUTH_LDAP_ROLE_RECURSION
                    value: "{{.Auth.LDAP.RoleRecursion}}"
                  - name: AUTH_LDAP_DEFAULT_ROLE
                    value: "{{.Auth.LDAP.DefaultRole}}"
                  - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
                    value: "{{.Auth.LDAP.RoleNameAttributeID}}"
                  - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
                    value: "{{.Auth.LDAP.ParseRoleNameFromDN}}"
                  - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
                    value: "{{.Auth.LDAP.RoleAttributeIsDN}}"
                  - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
                    value: "{{.Auth.LDAP.ReferralUserAttributeIDToCheck}}"
                  #{{end}}
                  ## LDAP config END
                  ## RoleMapping config BEGIN
                  #{{if .Auth.RoleMapper.RolesProperties}}
                  - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
                    value: "{{.Auth.RoleMapper.RolesProperties}}"
                  - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
                    value: "{{.Auth.RoleMapper.ReplaceRole}}"
                  #{{end}}
                  ## RoleMapping config END
                  # Auth config END
                volumeMounts:
                  - name: "{{.ApplicationName}}-{{.Console.Name}}-keystore-volume"
                    mountPath: "/etc/businesscentral-secret-volume"
                    readOnly: true
                  - name: "{{.ApplicationName}}-{{.Console.Name}}-pvol"
                    mountPath: "/opt/eap/standalone/data/kie"
            volumes:
              - name: "{{.ApplicationName}}-{{.Console.Name}}-keystore-volume"
                secret:
                  secretName: "{{.ApplicationName}}-businesscentral-app-secret"
              - name: "{{.ApplicationName}}-{{.Console.Name}}-pvol"
                persistentVolumeClaim:
                  claimName: "{{.ApplicationName}}-{{.Console.Name}}-claim"
  persistentVolumeClaims:
    - metadata:
        name: "{{.ApplicationName}}-{{.Console.Name}}-claim"
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: "64Mi"
  services:
    - spec:
        ports:
          - name: http
            port: 8080
            targetPort: 8080
          - name: https
            port: 8443
            targetPort: 8443
        selector:
          deploymentConfig: "{{.ApplicationName}}-{{.Console.Name}}"
      metadata:
        name: "{{.ApplicationName}}-{{.Console.Name}}"
        labels:
          app: "{{.ApplicationName}}-{{.Console.Name}}"
          application: "{{.ApplicationName}}"
          service: "{{.Product}}-{{.Console.Name}}"
        annotations:
          description: All the Business Central web server's ports.
    - spec:
        clusterIP: "None"
        ports:
          - name: "ping"
            port: 8888
            targetPort: 8888
        selector:
          deploymentConfig: "{{.ApplicationName}}-{{.Console.Name}}"
      metadata:
        name: "{{.ApplicationName}}-{{.Console.Name}}-ping"
        labels:
          app: "{{.ApplicationName}}-{{.Console.Name}}"
          application: "{{.ApplicationName}}"
          service: "{{.Product}}-{{.Console.Name}}"
        annotations:
          service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
          description: "The JGroups ping port for clustering."
  routes:
    - id: "{{.ApplicationName}}-{{.Console.Name}}-https"
      metadata:
        name: "{{.ApplicationName}}-{{.Console.Name}}"
        labels:
          app: "{{.ApplicationName}}-{{.Console.Name}}"
          application: "{{.ApplicationName}}"
          service: "{{.Product}}-{{.Console.Name}}"
        annotations:
          description: Route for Business Central's https service.
          haproxy.router.openshift.io/timeout: 60s
      spec:
        host: ""
        to:
          name: "{{.ApplicationName}}-{{.Console.Name}}"
        port:
          targetPort: https
        tls:
          insecureEdgeTerminationPolicy: Redirect
          termination: passthrough
## KIE smartrouter BEGIN
smartrouter:
  persistentVolumeClaims:
    - metadata:
        name: "{{.ApplicationName}}-smartrouter-claim"
        labels:
          app: "{{.ApplicationName}}-smartrouter"
          application: "{{.ApplicationName}}"
          service: "{{.Product}}-smartrouter"
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: "64Mi"
  deploymentConfigs:
    - metadata:
        name: "{{.ApplicationName}}-smartrouter"
        labels:
          app: "{{.ApplicationName}}-smartrouter"
          application: "{{.ApplicationName}}"
          service: "{{.Product}}-smartrouter"
      spec:
        strategy:
          type: Recreate
        triggers:
          - type: ImageChange
            imageChangeParams:
              automatic: true
              containerNames:
                - "{{.ApplicationName}}-smartrouter"
              from:
                kind: ImageStreamTag
                namespace: "openshift"
                name: "{{.Product}}{{.Version}}-smartrouter-openshift:{{.ImageTag}}"
          - type: ConfigChange
        replicas: 2
        selector:
          deploymentConfig: "{{.ApplicationName}}-smartrouter"
        template:
          metadata:
            name: "{{.ApplicationName}}-smartrouter"
            labels:
              app: "{{.ApplicationName}}-smartrouter"
              application: "{{.ApplicationName}}"
              deploymentConfig: "{{.ApplicationName}}-smartrouter"
              service: "{{.Product}}-smartrouter"
          spec:
            terminationGracePeriodSeconds: 60
            containers:
              - name: "{{.ApplicationName}}-smartrouter"
                image: "{{.Product}}{{.Version}}-smartrouter-openshift"
                imagePullPolicy: Always
                resources:
                  limits:
                    memory: "512Mi"
                ports:
                  - name: http
                    containerPort: 9000
                    protocol: TCP
                env:
                  - name: KIE_SERVER_ROUTER_HOST
                    valueFrom:
                      fieldRef:
                        fieldPath: status.podIP
                  - name: KIE_SERVER_ROUTER_PORT
                    value: "9000"
                  - name: KIE_SERVER_ROUTER_PORT_TLS
                    value: "9443"
                  - name: KIE_SERVER_ROUTER_ID
                    value: "kie-server-router"
                  - name: KIE_SERVER_ROUTER_NAME
                    value: "KIE Server Router"
                  - name: KIE_SERVER_ROUTER_TLS_KEYSTORE_KEYALIAS
                    value: "jboss"
                  - name: KIE_SERVER_ROUTER_TLS_KEYSTORE_PASSWORD
                    value: "{{.KeyStorePassword}}"
                  - name: KIE_SERVER_ROUTER_TLS_KEYSTORE
                    value: "/etc/smartrouter-secret-volume/keystore.jks"
                  - name: KIE_SERVER_CONTROLLER_USER
                    value: controllerUser
                  - name: KIE_SERVER_CONTROLLER_PWD
                    value: "{{.ControllerPassword}}"
                  - name: KIE_SERVER_CONTROLLER_SERVICE
                    value: "{{.ApplicationName}}-{{.Console.Name}}"
                  - name: KIE_SERVER_CONTROLLER_PROTOCOL
                    value: "http"
                  - name: KIE_SERVER_ROUTER_REPO
                    value: "/opt/{{.Product}}-smartrouter/data"
                  - name: KIE_SERVER_ROUTER_CONFIG_WATCHER_ENABLED
                    value: "true"
                volumeMounts:
                  - name: "{{.ApplicationName}}-smartrouter"
                    mountPath: "/opt/{{.Product}}-smartrouter/data"
                  - name: smartrouter-keystore-volume
                    mountPath: "/etc/smartrouter-secret-volume"
                    readOnly: true
            volumes:
              - name: "{{.ApplicationName}}-smartrouter"
                persistentVolumeClaim:
                  claimName: "{{.ApplicationName}}-smartrouter-claim"
              - name: smartrouter-keystore-volume
                secret:
                  secretName: "{{.ApplicationName}}-smartrouter-app-secret"
  services:
    - spec:
        ports:
          - name: http
            port: 9000
            targetPort: 9000
          - name: https
            port: 9443
            targetPort: 9443
        selector:
          deploymentConfig: "{{.ApplicationName}}-smartrouter"
      metadata:
        name: "{{.ApplicationName}}-smartrouter"
        labels:
          app: "{{.ApplicationName}}-smartrouter"
          application: "{{.ApplicationName}}"
          service: "{{.Product}}-smartrouter"
        annotations:
      description: The smart router server http and https ports.
  routes:
    - id: "{{.ApplicationName}}-smartrouter-https"
      metadata:
        name: "{{.ApplicationName}}-smartrouter"
        labels:
          app: "{{.ApplicationName}}-smartrouter"
          application: "{{.ApplicationName}}"
          service: "{{.Product}}-smartrouter"
        annotations:
          description: Route for Smart Router's https service.
      spec:
        host: ""
        to:
          name: "{{.ApplicationName}}-smartrouter"
        port:
          targetPort: https
        tls:
          insecureEdgeTerminationPolicy: Redirect
          termination: passthrough
## KIE smartrouter END
## KIE Servers BEGIN
servers:
  ## RANGE BEGINS
  #{{ range $index, $Map := .Servers }}
  ## KIE server deployment config BEGIN
  - deploymentConfigs:
      - metadata:
          name: "{{$.ApplicationName}}-kieserver-{{$index}}"
          labels:
            app: "{{$.ApplicationName}}-kieserver-{{$index}}"
            application: "{{$.ApplicationName}}"
            service: "{{$.Product}}-kieserver"
        spec:
          strategy:
            rollingParams:
              maxUnavailable: 0
            type: Rolling
          triggers:
            - type: ImageChange
              imageChangeParams:
                automatic: true
                containerNames:
                  - "{{$.ApplicationName}}-kieserver-{{$index}}"
                from:
                  kind: "{{.From.Kind}}"
                  namespace: "{{.From.Namespace}}"
                  name: "{{.From.Name}}"
            - type: ConfigChange
          replicas: 1
          selector:
            deploymentConfig: "{{$.ApplicationName}}-kieserver-{{$index}}"
          template:
            metadata:
              name: "{{$.ApplicationName}}-kieserver-{{$index}}"
              labels:
                app: "{{$.ApplicationName}}-kieserver-{{$index}}"
                application: "{{$.ApplicationName}}"
                service: "{{$.Product}}-kieserver"
                deploymentConfig: "{{$.ApplicationName}}-kieserver-{{$index}}"
            spec:
              serviceAccountName: "{{$.ApplicationName}}-{{$.Product}}svc"
              terminationGracePeriodSeconds: 60
              containers:
                - name: "{{$.ApplicationName}}-kieserver-{{$index}}"
                  image: "{{$.Product}}{{$.Version}}-kieserver-openshift"
                  imagePullPolicy: Always
                  env:
                    - name: KIE_ADMIN_USER
                      value: adminUser
                    - name: KIE_ADMIN_PWD
                      value: "{{$.AdminPassword}}"
                    #- name: KIE_SERVER_STARTUP_STRATEGY
                    #  value: "OpenShiftStartupStrategy"
                    - name: KIE_SERVER_USER
                      value: executionUser
                    - name: KIE_SERVER_PWD
                      value: "{{$.ServerPassword}}"
                    - name: DROOLS_SERVER_FILTER_CLASSES
                      value: "true"
                    - name: KIE_SERVER_CONTROLLER_USER
                      value: controllerUser
                    - name: KIE_SERVER_CONTROLLER_PWD
                      value: "{{$.ControllerPassword}}"
                    - name: KIE_SERVER_CONTROLLER_SERVICE
                      value: "{{$.ApplicationName}}-{{$.Console.Name}}"
                    - name: KIE_SERVER_CONTROLLER_PROTOCOL
                      value: ws
                    - name: KIE_MBEANS
                      value: enabled
                    - name: KIE_SERVER_ROUTE_NAME
                      value: "{{$.ApplicationName}}-kieserver-{{$index}}"
                    - name: KIE_SERVER_USE_SECURE_ROUTE_NAME
                      value: "false"
                    - name: KIE_SERVER_PROTOCOL
                      value: https
                    - name: KIE_SERVER_PORT
                      value: "443"
                    - name: KIE_SERVER_ID
                      value: "{{.KieServerID}}"
                    - name: "{{$.MavenRepo}}_MAVEN_REPO_USERNAME"
                      value: mavenUser
                    - name: "{{$.MavenRepo}}_MAVEN_REPO_PASSWORD"
                      value: "{{$.MavenPassword}}"
                    - name: "{{$.MavenRepo}}_MAVEN_REPO_SERVICE"
                      value: "{{$.ApplicationName}}-{{$.Console.Name}}"
                    - name: MAVEN_REPOS
                      value: "{{$.MavenRepo}},EXTERNAL"
                    - name: "{{$.MavenRepo}}_MAVEN_REPO_PATH"
                      value: /maven2/
                    - name: KIE_SERVER_BYPASS_AUTH_USER
                      value: "false"
                    - name: HTTPS_KEYSTORE_DIR
                      value: "/etc/kieserver-secret-volume"
                    - name: HTTPS_KEYSTORE
                      value: "keystore.jks"
                    - name: HTTPS_NAME
                      value: "jboss"
                    - name: HTTPS_PASSWORD
                      value: "{{$.KeyStorePassword}}"
                    - name: JGROUPS_PING_PROTOCOL
                      value: "openshift.DNS_PING"
                    - name: OPENSHIFT_DNS_PING_SERVICE_NAME
                      value: "{{$.ApplicationName}}-kieserver-{{$index}}-ping"
                    - name: OPENSHIFT_DNS_PING_SERVICE_PORT
                      value: "8888"
                    # Auth config BEGIN
                    ## SSO config BEGIN
                    #{{if $.Auth.SSO.URL}}
                    - name: SSO_OPENIDCONNECT_DEPLOYMENTS
                      value: ROOT.war
                    - name: SSO_URL
                      value: "{{$.Auth.SSO.URL}}"
                    - name: SSO_REALM
                      value: "{{$.Auth.SSO.Realm}}"
                    - name: SSO_USERNAME
                      value: "{{$.Auth.SSO.AdminUser}}"
                    - name: SSO_PASSWORD
                      value: "{{$.Auth.SSO.AdminPassword}}"
                    - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
                      value: "{{$.Auth.SSO.DisableSSLCertValidation}}"
                    - name: SSO_PRINCIPAL_ATTRIBUTE
                      value: "{{$.Auth.SSO.PrincipalAttribute}}"
                    - name: SSO_SECRET
                      value: "{{.SSOAuthClient.Secret}}"
                    - name: SSO_CLIENT
                      value: "{{.SSOAuthClient.Name}}"
                    - name: HOSTNAME_HTTP
                      value: "{{.SSOAuthClient.HostnameHTTP}}"
                    - name: HOSTNAME_HTTPS
                      value: "{{.SSOAuthClient.HostnameHTTPS}}"
                    #{{end}}
                    ## SSO config END
                    ## LDAP config BEGIN
                    #{{if $.Auth.LDAP.URL}}
                    - name: AUTH_LDAP_URL
                      value: "{{$.Auth.LDAP.URL}}"
                    - name: AUTH_LDAP_BIND_DN
                      value: "{{$.Auth.LDAP.BindDN}}"
                    - name: AUTH_LDAP_BIND_CREDENTIAL
                      value: "{{$.Auth.LDAP.BindCredential}}"
                    - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
                      value: "{{$.Auth.LDAP.JAASSecurityDomain}}"
                    - name: AUTH_LDAP_BASE_CTX_DN
                      value: "{{$.Auth.LDAP.BaseCtxDN}}"
                    - name: AUTH_LDAP_BASE_FILTER
                      value: "{{$.Auth.LDAP.BaseFilter}}"
                    - name: AUTH_LDAP_SEARCH_SCOPE
                      value: "{{$.Auth.LDAP.SearchScope}}"
                    - name: AUTH_LDAP_SEARCH_TIME_LIMIT
                      value: "{{$.Auth.LDAP.SearchTimeLimit}}"
                    - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
                      value: "{{$.Auth.LDAP.DistinguishedNameAttribute}}"
                    - name: AUTH_LDAP_PARSE_USERNAME
                      value: "{{$.Auth.LDAP.ParseUsername}}"
                    - name: AUTH_LDAP_USERNAME_BEGIN_STRING
                      value: "{{$.Auth.LDAP.UsernameBeginString}}"
                    - name: AUTH_LDAP_USERNAME_END_STRING
                      value: "{{$.Auth.LDAP.UsernameEndString}}"
                    - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
                      value: "{{$.Auth.LDAP.RoleAttributeID}}"
                    - name: AUTH_LDAP_ROLES_CTX_DN
                      value: "{{$.Auth.LDAP.RolesCtxDN}}"
                    - name: AUTH_LDAP_ROLE_FILTER
                      value: "{{$.Auth.LDAP.RoleFilter}}"
                    - name: AUTH_LDAP_ROLE_RECURSION
                      value: "{{$.Auth.LDAP.RoleRecursion}}"
                    - name: AUTH_LDAP_DEFAULT_ROLE
                      value: "{{$.Auth.LDAP.DefaultRole}}"
                    - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
                      value: "{{$.Auth.LDAP.RoleNameAttributeID}}"
                    - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
                      value: "{{$.Auth.LDAP.ParseRoleNameFromDN}}"
                    - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
                      value: "{{$.Auth.LDAP.RoleAttributeIsDN}}"
                    - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
                      value: "{{$.Auth.LDAP.ReferralUserAttributeIDToCheck}}"
                    #{{end}}
                    ## LDAP config END
                    ## RoleMapping config BEGIN
                    #{{if $.Auth.RoleMapper.RolesProperties}}
                    - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
                      value: "{{$.Auth.RoleMapper.RolesProperties}}"
                    - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
                      value: "{{$.Auth.RoleMapper.ReplaceRole}}"
                    #{{end}}
                    ## RoleMapping config END
                    # Auth config END
                  resources:
                    limits:
                      memory: 1Gi
                  livenessProbe:
                    exec:
                      command:
                        - "/bin/bash"
                        - "-c"
                        - curl --fail --silent -u "${KIE_ADMIN_USER}":"${KIE_ADMIN_PWD}" http://localhost:8080/services/rest/server/healthcheck
                    initialDelaySeconds: 180
                    timeoutSeconds: 2
                    periodSeconds: 15
                    failureThreshold: 3
                  readinessProbe:
                    exec:
                      command:
                        - "/bin/bash"
                        - "-c"
                        - curl --fail --silent -u "${KIE_ADMIN_USER}":"${KIE_ADMIN_PWD}" http://localhost:8080/services/rest/server/readycheck
                    initialDelaySeconds: 60
                    timeoutSeconds: 2
                    periodSeconds: 30
                    failureThreshold: 6
                  ports:
                    - name: jolokia
                      containerPort: 8778
                      protocol: TCP
                    - name: http
                      containerPort: 8080
                      protocol: TCP
                    - name: https
                      containerPort: 8443
                      protocol: TCP
                    - name: ping
                      containerPort: 8888
                      protocol: TCP
                  volumeMounts:
                    - mountPath: /etc/kieserver-secret-volume
                      name: kieserver-keystore-volume
                      readOnly: true
              volumes:
                - name: kieserver-keystore-volume
                  secret:
                    secretName: "{{$.ApplicationName}}-kieserver-{{$index}}-app-secret"
      ## KIE server deployment config END
    ## KIE server services BEGIN
    services:
      - spec:
          ports:
            - name: http
              port: 8080
              targetPort: 8080
            - name: https
              port: 8443
              targetPort: 8443
          selector:
            deploymentConfig: "{{$.ApplicationName}}-kieserver-{{$index}}"
          sessionAffinity: ClientIP
          sessionAffinityConfig:
            clientIP:
              timeoutSeconds: 3600
        metadata:
          name: "{{$.ApplicationName}}-kieserver-{{$index}}"
          labels:
            app: "{{$.ApplicationName}}-kieserver-{{$index}}"
            application: "{{$.ApplicationName}}"
            service: "{{$.Product}}-kieserver"
          annotations:
            description: All the KIE server web server's ports. (KIE server)
      - spec:
          clusterIP: "None"
          ports:
            - name: "ping"
              port: 8888
              targetPort: 8888
          selector:
            deploymentConfig: "{{$.ApplicationName}}-kieserver-{{$index}}"
        metadata:
          name: "{{$.ApplicationName}}-kieserver-{{$index}}-ping"
          labels:
            app: "{{$.ApplicationName}}-kieserver-{{$index}}"
            application: "{{$.ApplicationName}}"
            service: "{{$.Product}}-kieserver"
          annotations:
            service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
            description: "The JGroups ping port for clustering."
      ## KIE server services END
    ## KIE server routes BEGIN
    routes:
      - id: "{{$.ApplicationName}}-kieserver-{{$index}}-https"
        metadata:
          name: "{{$.ApplicationName}}-kieserver-{{$index}}"
          labels:
            app: "{{$.ApplicationName}}-kieserver-{{$index}}"
            application: "{{$.ApplicationName}}"
            service: "{{$.Product}}-kieserver"
          annotations:
            description: Route for KIE server's https service.
            haproxy.router.openshift.io/timeout: 60s
        spec:
          to:
            name: "{{$.ApplicationName}}-kieserver-{{$index}}"
          port:
            targetPort: https
          tls:
            insecureEdgeTerminationPolicy: Redirect
            termination: passthrough
      ## KIE server routes END
#{{end}}
## RANGE ends
## KIE Servers END

## Other required resources BEGIN
others:
  - roles:
      - metadata:
          name: "{{.ApplicationName}}-{{.Product}}svc-edit"
        rules:
          - apiGroups:
              - ""
            resources:
              - "*"
            verbs:
              - "*"
          - apiGroups:
              - app.kiegroup.org
              - apps.openshift.io
              - image.openshift.io
              - route.openshift.io
            resources:
              - "*"
            verbs:
              - "*"

    serviceAccounts:
      - metadata:
          name: "{{.ApplicationName}}-{{.Product}}svc"
          labels:
            application: "{{.ApplicationName}}"

    rolebindings:
      - metadata:
          name: "{{.ApplicationName}}-{{.Product}}svc-edit"
        subjects:
          - kind: ServiceAccount
            name: "{{.ApplicationName}}-{{.Product}}svc"
        roleRef:
          kind: Role
          name: "{{.ApplicationName}}-{{.Product}}svc-edit"
# Other required resources END
